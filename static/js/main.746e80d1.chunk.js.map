{"version":3,"sources":["components/Die/index.js","components/RollDice/index.js","App.js","serviceWorker.js","index.js"],"names":["Die","_ref","face","rolling","react_default","a","createElement","className","concat","RollDice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","roll","dice1","slides","Math","floor","random","length","dice2","setState","setTimeout","state","components_Die","onClick","disabled","Component","defaultProps","App","components_RollDice","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSASeA,SANH,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAOC,EAAaF,EAAbE,QACnB,OACEC,EAAAC,EAAAC,cAAA,KAAGC,UAAS,mBAAAC,OAAqBN,EAArB,KAAAM,OAA6BL,EAAU,UAAY,QCD7DM,qBAIJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,KAAO,WACL,IAAMC,EAAQR,EAAKD,MAAMU,OACvBC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAKD,MAAMU,OAAOI,SAEzCC,EAAQd,EAAKD,MAAMU,OACvBC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAKD,MAAMU,OAAOI,SAE/Cb,EAAKe,SAAS,CAACP,QAAMM,QAAOtB,SAAS,IACrCwB,WAAW,WACThB,EAAKe,SAAS,CAACvB,SAAU,KACxB,MAjBHQ,EAAKiB,MAAQ,CACXT,MAAO,MACPM,MAAO,OACPtB,SAAS,GALKQ,wEAuBhB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACuB,EAAD,CAAK3B,KAAMY,KAAKc,MAAMT,MAAOhB,QAASW,KAAKc,MAAMzB,UACjDC,EAAAC,EAAAC,cAACuB,EAAD,CAAK3B,KAAMY,KAAKc,MAAMH,MAAOtB,QAASW,KAAKc,MAAMzB,WAEnDC,EAAAC,EAAAC,cAAA,UAAQwB,QAAWhB,KAAKI,KAAMa,SAAUjB,KAAKc,MAAMzB,SAChDW,KAAKc,MAAMzB,QAAU,eAAiB,uBAlC1B6B,cAAjBvB,EACGwB,aAAe,CACpBb,OAAS,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAuCtCX,cCjCAyB,MARf,WACE,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.746e80d1.chunk.js","sourcesContent":["import React from \"react\";\nimport './die.css'\n\nconst Die = ({face , rolling}) => {\n  return(\n    <i className={`Die fas fa-dice-${face} ${rolling ? 'shaking' : ''}`}></i>\n  )  \n}\n\nexport default Die;\n","import React , { Component } from 'react';\nimport Die from '../Die';\nimport './RollDice.css'\n\nclass RollDice extends Component {\n  static defaultProps = {\n    slides : ['one', 'two', 'three', 'four', 'five', 'six']\n  }\n  constructor(props){\n    super(props);\n    this.state = {\n      dice1: 'one',\n      dice2: 'five',\n      rolling: false,\n    }\n  }\n  \n  roll = () => {\n    const dice1 = this.props.slides[\n      Math.floor(Math.random() * this.props.slides.length)\n    ]\n    const dice2 = this.props.slides[\n      Math.floor(Math.random() * this.props.slides.length)\n    ]\n    this.setState({dice1,dice2, rolling: true})\n    setTimeout(() => {\n      this.setState({rolling : false})\n    }, 1000);\n  }\n\n  render(){\n    return(\n      <div className=\"RollDice\">\n        <div className=\"RollDice-container\">\n          <Die face={this.state.dice1} rolling={this.state.rolling}/>\n          <Die face={this.state.dice2} rolling={this.state.rolling}/>\n        </div>\n        <button onClick = {this.roll} disabled={this.state.rolling}>\n          {this.state.rolling ? 'Rolling ....' : 'Roll Dice !'}\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default RollDice;","import React from 'react';\nimport RollDie from './components/RollDice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}